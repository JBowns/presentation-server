<!doctype html>
<html lang="en">

<head>
	<meta charset="utf-8">

	<title>{{title}}</title>

	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

	<link rel="stylesheet" href="/resources/reveal.js/css/reveal.css">
	<link rel="stylesheet" href="/themes/{{theme}}.css" id="theme">

	<style>
		.reveal .note {
			text-align: center;
			font-family: "Open Sans", sans-serif;
			font-size: 40%;
			font-weight: normal; //color: #eee;
		}
	</style>

</head>

<body>

	<div class="reveal">
		<div class="slides">
			{{{slides}}}
		</div>
	</div>

	<script src="/resources/reveal.js/lib/js/head.min.js"></script>
	<script src="/resources/reveal.js/js/reveal.js"></script>

	<script>
		Reveal.initialize({
			controls: false,
			loop: true,
			keyboard: false,
			progress: false,
			history: true,
			center: true,
			transitionSpeed: 'slow',
			transition: 'fade'
		});
	</script>

	<script>
		(function () {

			let currentTheme = null;
			let currentStyle = null;
			let themes = [];
			let styles = [];

			let iframes = Array.from(
				document.getElementsByTagName("iframe")
			).map(iframe => {
				iframe.onload = (e) => {
					iframe.contentWindow.Reveal.configure({ controls: true, keyboard: false });
					iframe.contentWindow.disableArrowKeys();
				};
				return iframe;
			}).map(iframe => {
				return iframe.contentWindow;
			});

			let requestResource = (path, cb) => {
				var xhr = new XMLHttpRequest();
				xhr.open('GET', path);
				xhr.send(null);
				xhr.onreadystatechange = function () {
					if (xhr.readyState === 4 && xhr.status === 200) {
						cb(JSON.parse(xhr.responseText));
					}
				};
			}

			let updateiFrames = (keyCode) => {

				const LEFT = 37;
				const RIGHT = 39;
				const UP = 38;
				const DOWN = 40;

				if (Number.isInteger(currentTheme)) {
					if (keyCode == RIGHT) {
						currentTheme++;
					} else if (keyCode == LEFT) {
						currentTheme--;
					}
					if (currentTheme >= themes.length) {
						currentTheme = 0;
					} else if (currentTheme < 0) {
						currentTheme = themes.length - 1;
					}
				} else if (keyCode == LEFT || keyCode == RIGHT) {
					currentTheme = 0;
				}

				if (Number.isInteger(currentStyle)) {
					if (keyCode == UP) {
						currentStyle++;
					} else if (keyCode == DOWN) {
						currentStyle--;
					}
					if (currentStyle >= styles.length) {
						currentStyle = 0;
					} else if (currentStyle < 0) {
						currentStyle = styles.length - 1;
					}
				} else if (keyCode == UP || keyCode == DOWN) {
					currentStyle = 0;
				}

				if (keyCode == LEFT || keyCode == RIGHT || keyCode == UP || keyCode == DOWN) {

					let visibleiFrameIdx = Reveal.getProgress();
					let currentIndices = iframes[visibleiFrameIdx].Reveal.getIndices();
					let currentProgress = iframes[visibleiFrameIdx].Reveal.getProgress();

					let chosenTheme = themes[currentTheme] ? themes[currentTheme] : "{{defaultTheme}}";
					let chosenStyle = styles[currentStyle] ? styles[currentStyle] : "{{defaultStyle}}";

					iframes.forEach(iframe => {
						iframe.Reveal.slide(currentIndices.h, currentIndices.v, currentIndices);
						iframe.updateTheme(chosenTheme);
						iframe.updateStyle(chosenStyle);
					});

					Array.from(document.getElementsByTagName("a")).map(anchor => {
						anchor.href = "/presentations/{{id}}?theme=" + chosenTheme + "&style=" + chosenStyle;
						anchor.text = "Start";
					});

					Array.from(document.getElementsByClassName("selection")).map(span => {
						span.innerHTML = "Theme: <strong>" + chosenTheme + "</strong> Style: <strong>" + chosenStyle + "</strong>";
					});

					Reveal.next();

				}
			};

			window.onload = (e) => {
				
				requestResource('/api/themes', arr => {
					themes = arr;
				});

				requestResource('/api/styles', arr => {
					styles = arr;
				});

				document.addEventListener('iFrameKeyPress', function (e) {
					window.focus();
					updateiFrames(e.detail.keyCode);
				}, false);

				document.onkeydown = (e) => updateiFrames((e || window.event).keyCode);

			};

		})();
	</script>

</body>

</html>